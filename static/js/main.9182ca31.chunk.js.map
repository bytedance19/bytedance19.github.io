{"version":3,"sources":["AddTodoForm.tsx","TodoListItem.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTodoForm","addTodo","useState","text","setText","type","value","onChange","e","target","onClick","preventDefault","TodoListItem","todo","toggleTodo","style","textDecoration","complete","undefined","defaultChecked","TodoList","todos","map","initialTodos","App","setTodos","selectedTodo","newTodos","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAIaA,EAA+B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7C,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,iCACE,uBACEC,KAAK,OACLC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAQI,EAAEC,OAAOH,UAEpC,wBACED,KAAK,SACLK,QAAS,SAACF,GACRA,EAAEG,iBACFV,EAAQE,GACRC,EAAQ,KALZ,0BCROQ,EAAgC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACpD,OACE,6BACE,wBACEC,MAAO,CAAEC,eAAgBH,EAAKI,SAAW,oBAAiBC,GAD5D,UAGE,uBACEb,KAAK,WACLc,eAAgBN,EAAKI,SACrBP,QAAS,WACPI,EAAWD,MAGdA,EAAKV,WCZDiB,EAA4B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOP,EAAiB,EAAjBA,WACjD,OACI,6BACKO,EAAMC,KAAI,SAAAT,GACP,OAAO,cAAC,EAAD,CAA8BA,KAAMA,EAAMC,WAAYA,GAAnCD,EAAKV,YCLvCoB,EAAuB,GAgCdC,MA5Bf,WACE,MAA0BtB,mBAASqB,GAAnC,mBAAOF,EAAP,KAAcI,EAAd,KAmBA,OACE,qCACE,cAAC,EAAD,CAAUJ,MAAOA,EAAOP,WApBT,SAACY,GAClB,IAAMC,EAAWN,EAAMC,KAAI,SAACT,GAC1B,OAAIA,IAASa,EACJ,2BACFb,GADL,IAEEI,UAAWJ,EAAKI,WAGXJ,KAGXY,EAASE,MAUP,cAAC,EAAD,CAAa1B,QARQ,SAACE,GACxB,IAAMyB,EAAgB,CAAEzB,KAAMA,EAAMc,UAAU,GACxCU,EAAS,GAAD,mBAAKN,GAAL,CAAWO,IACzBH,EAASE,UCbEE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9182ca31.chunk.js","sourcesContent":["import React, { useState } from \"react\";\ninterface Props {\n  addTodo: AddTodo;\n}\nexport const AddTodoForm: React.FC<Props> = ({ addTodo }) => {\n  const [text, setText] = useState(\"\");\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button\n        type=\"submit\"\n        onClick={(e) => {\n          e.preventDefault();\n          addTodo(text);\n          setText('');\n        }}\n      >\n        Add Todo\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\ninterface Props {\n  todo: Todo;\n  toggleTodo: ToggleTodo;\n}\nexport const TodoListItem: React.FC<Props> = ({ todo, toggleTodo }) => {\n  return (\n    <li>\n      <label\n        style={{ textDecoration: todo.complete ? \"line-through\" : undefined }}\n      >\n        <input\n          type=\"checkbox\"\n          defaultChecked={todo.complete}\n          onClick={() => {\n            toggleTodo(todo);\n          }}\n        />\n        {todo.text}\n      </label>\n    </li>\n  );\n};\n","import { TodoListItem } from \"./TodoListItem\";\n\ninterface Props {\n  todos: Todo[];\n  toggleTodo: ToggleTodo;\n}\nexport const TodoList: React.FC<Props> = ({ todos, toggleTodo }) => {\n  return (\n      <ul>\n          {todos.map(todo=>{\n              return <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo}/>\n          })}\n      </ul>\n  )\n  \n};\n","import { useState } from \"react\";\nimport { AddTodoForm } from \"./AddTodoForm\";\nimport { TodoList } from \"./TodoList\";\nimport { TodoListItem } from \"./TodoListItem\";\n\nconst initialTodos: Todo[] = [\n  // { text: \"Walk the dog\", complete: false },\n  // { text: \"Write app\", complete: true },\n];\nfunction App() {\n  const [todos, setTodos] = useState(initialTodos);\n  const toggleTodo = (selectedTodo: Todo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      } else {\n        return todo;\n      }\n    });\n    setTodos(newTodos);\n  };\n  const addTodo: AddTodo = (text: string) => {\n    const newTodo: Todo = { text: text, complete: false };\n    const newTodos=[...todos,newTodo];\n    setTodos(newTodos);\n  };\n  return (\n    <>\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      <AddTodoForm addTodo={addTodo}/>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}